
import java.awt.Image;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.nio.file.Files;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static javax.script.ScriptEngine.FILENAME;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sala1
 */
public class Imagen extends javax.swing.JFrame {
    
    private JFileChooser seleccionado = new JFileChooser();
    b B = new b();
    private byte[] bytesImg;
    BufferedImage imagen1;
    File archivo;
    int contador=0;
    //para almacenar las imagene
    private ArrayList<BufferedImage> fotos = new ArrayList<BufferedImage>();
    
    /**
     * Creates new form Imagen
     * @param obj
     */
    public Imagen(){
        setTitle("Filtros Imagenes");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Imagen_Pantalla = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        filtro = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        RGB = new javax.swing.JComboBox<>();
        Imagen_Pantalla1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Imagen_Pantalla.setToolTipText("");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtros", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N

        filtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Azul", "Erosion", "LowPass", "Detectar Bordes", "Filtro10", "Filtro11", "Filtro12", "Filtro13", "Filtro15", "Filtro16", "Filtro17", "Filtro18", "Filtro19", "Filtro20", "Filtro21", "Filtro22", "Filtro23", "Filtro24" }));
        filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filtro, 0, 174, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RGB", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N

        RGB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguno", "Escala de Grises", "Rojo", "Negativo", "Verde", "Blanco y Negro" }));
        RGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RGB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(RGB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mensaje.setBackground(new java.awt.Color(0, 0, 0));
        mensaje.setForeground(new java.awt.Color(204, 0, 51));
        mensaje.setText("Imagen Original");
        mensaje.setToolTipText("");

        Imagen_Pantalla1.setToolTipText("");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Imagen_Pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Imagen_Pantalla1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Imagen_Pantalla, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Imagen_Pantalla1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroActionPerformed
        filtros();
    }//GEN-LAST:event_filtroActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            
            Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
            if(seleccionado.showDialog(null, "ABRIR ARCHIVO") == JFileChooser.APPROVE_OPTION){
               archivo = seleccionado.getSelectedFile();
            if(archivo.canRead()){
                if(archivo.getName().endsWith("jpg")||archivo.getName().endsWith("JPG")){
                    imagen1 = ImageIO.read(archivo);
                    File outputfile = new File(archivo.getName());
                    bytesImg = Files.readAllBytes(archivo.toPath());
                    bytesImg = mir.AbrirAImagen(bytesImg);
                    ImageIO.write(imagen1, "jpg", outputfile);
                    fotos.add(imagen1);
                    contador+=1;
                    Imagen_Pantalla.setIcon(new ImageIcon(imagen1.getScaledInstance(Imagen_Pantalla.getWidth(), Imagen_Pantalla.getHeight(), Image.SCALE_DEFAULT)));
                    }else{
                        JOptionPane.showMessageDialog(null, "Por favor seleccione un archivo de texto o de imagen.");
                    }
                }
            }
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void RGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGBActionPerformed
        RGB();
    }//GEN-LAST:event_RGBActionPerformed
    
    public static void mos_msj(String Mensaje) {
        mensaje.setText(Mensaje);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Imagen_Pantalla;
    private javax.swing.JLabel Imagen_Pantalla1;
    private javax.swing.JComboBox<String> RGB;
    private javax.swing.JComboBox<String> filtro;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    public static final javax.swing.JLabel mensaje = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables

    private void filtros() {
        if (filtro.getSelectedItem() == "Ninguno") {
            BufferedImage imagenO = fotos.get(contador-1);
            Imagen_Pantalla1.setIcon(new ImageIcon(imagenO.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
            mos_msj("Imagen Original");
            }
        if (filtro.getSelectedItem() == "Azul") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro6();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro6.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro ");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Erosion") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro7();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro7.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro ");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "LowPass") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro8();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro8.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro ");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Detectar Bordes") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro9();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro9.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro ");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro10") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro10();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro10.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 10");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro11") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro11();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro11.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 12");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro12") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro12();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro12.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 12");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro13") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro13();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro13.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 13");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro14") {
             try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro14();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro14.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 14");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro15") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro15();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro15.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 15");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro16") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro16();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro16.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 16");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro17") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro17();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro17.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 17");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        if (filtro.getSelectedItem() == "Filtro18") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro18();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro18.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 18");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro19") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro19();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro19.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 19");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro20") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro20();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro20.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 20");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro21") {
             try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro21();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro21.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 21");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro22") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro22();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro22.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 22");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro23") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro23();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro23.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 23");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (filtro.getSelectedItem() == "Filtro24") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro24();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro24.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro 24");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void RGB() {
        if (RGB.getSelectedItem() == "Ninguno") {    
            BufferedImage imagenO = fotos.get(contador-1);
            Imagen_Pantalla1.setIcon(new ImageIcon(imagenO.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
            mos_msj("Imagen Original");
        }
        if (RGB.getSelectedItem() == "Escala de Grises") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro2();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro1.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro escala de grises");
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (RGB.getSelectedItem() == "Negativo") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro3();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro2.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro negativo");
            } catch (RemoteException | NotBoundException | MalformedURLException | FileNotFoundException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (RGB.getSelectedItem() == "Rojo") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro4();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro3.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro rojo");
            } catch (RemoteException | NotBoundException | MalformedURLException | FileNotFoundException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (RGB.getSelectedItem() == "Verde") {
            try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro5();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro4.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro verde");
            } catch (RemoteException | NotBoundException | MalformedURLException | FileNotFoundException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (RGB.getSelectedItem() == "Blanco y Negro") {
           try {
                Manejo_Imagenes mir = (Manejo_Imagenes)java.rmi.Naming.lookup("rmi://"+B.getIp()+":1098/PruebaRMI");
                byte [] f = mir.filtro1();
                InputStream in = new ByteArrayInputStream(f);
                BufferedImage bImageFromConvert = ImageIO.read(in);
                File archivo1 = new File("imagenfiltro5.jpg");
                ImageIO.write(bImageFromConvert, "jpg", archivo1);
                Imagen_Pantalla1.setIcon(new ImageIcon(bImageFromConvert.getScaledInstance(Imagen_Pantalla1.getWidth(), Imagen_Pantalla1.getHeight(), Image.SCALE_DEFAULT)));
                mos_msj("Se aplicó filtro blanco y negro");
            } catch (RemoteException | NotBoundException | MalformedURLException | FileNotFoundException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Imagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
